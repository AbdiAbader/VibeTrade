import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./stripe.service";
class StripeElementsService {
    stripeService;
    constructor(stripeService) {
        this.stripeService = stripeService;
    }
    elements(stripe, options = {}) {
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    }
    paymentRequest(stripe, options) {
        return stripe ? stripe.paymentRequest(options) : this.stripeService.paymentRequest(options);
    }
    mergeOptions(options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return {
                ...(options || {}),
                classes: {
                    base: containerClass,
                    complete: `${containerClass}--complete`,
                    empty: `${containerClass}--empty`,
                    focus: `${containerClass}--focus`,
                    invalid: `${containerClass}--invalid`,
                    webkitAutoFill: `${containerClass}--webkit-autoFill`
                }
            };
        }
        return options || {};
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: StripeElementsService, deps: [{ token: i1.StripeService }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: StripeElementsService });
}
export { StripeElementsService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: StripeElementsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StripeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3RyaXBlL3NyYy9saWIvc2VydmljZXMvc3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBa0MzQyxNQUNhLHFCQUFxQjtJQUNaO0lBQXBCLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUcsQ0FBQztJQUtwRCxRQUFRLENBQUMsTUFBTSxFQUFFLE9BQU8sR0FBRyxFQUFFO1FBQzNCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNqQztZQUNELE9BQU8sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFCO2FBQU07WUFDTCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3QztZQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN0QztJQUNILENBQUM7SUFFRCxjQUFjLENBQUMsTUFBTSxFQUFFLE9BQThCO1FBQ25ELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBOENELFlBQVksQ0FBQyxPQUFPLEVBQUUsY0FBc0I7UUFDMUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbkQsT0FBTyxPQUFPLElBQUksRUFBRSxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDaEMsT0FBTztnQkFDTCxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztnQkFDbEIsT0FBTyxFQUFFO29CQUNQLElBQUksRUFBRSxjQUFjO29CQUNwQixRQUFRLEVBQUUsR0FBRyxjQUFjLFlBQVk7b0JBQ3ZDLEtBQUssRUFBRSxHQUFHLGNBQWMsU0FBUztvQkFDakMsS0FBSyxFQUFFLEdBQUcsY0FBYyxTQUFTO29CQUNqQyxPQUFPLEVBQUUsR0FBRyxjQUFjLFdBQVc7b0JBQ3JDLGNBQWMsRUFBRSxHQUFHLGNBQWMsbUJBQW1CO2lCQUNyRDthQUNGLENBQUM7U0FDSDtRQUVELE9BQU8sT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO3VHQXhGVSxxQkFBcUI7MkdBQXJCLHFCQUFxQjs7U0FBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIFBheW1lbnRSZXF1ZXN0LFxuICBQYXltZW50UmVxdWVzdE9wdGlvbnMsXG4gIFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlQXVCYW5rQWNjb3VudEVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlRWxlbWVudHMsXG4gIFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlSWJhbkVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVJZGVhbEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlUGF5bWVudEVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVBZmZpcm1NZXNzYWdlRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUFmdGVycGF5Q2xlYXJwYXlNZXNzYWdlRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUVwc0JhbmtFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlUDI0QmFua0VsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVBZGRyZXNzRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUxpbmtBdXRoZW50aWNhdGlvbkVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVJc3N1aW5nQ2FyZE51bWJlckRpc3BsYXlFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlSXNzdWluZ0NhcmRDdmNEaXNwbGF5RWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUlzc3VpbmdDYXJkRXhwaXJ5RGlzcGxheUVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVJc3N1aW5nQ2FyZFBpbkRpc3BsYXlFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zQ2xpZW50U2VjcmV0LFxuICBTdHJpcGVFbGVtZW50c09wdGlvbnNNb2RlLFxuICBTdHJpcGVFbGVtZW50c09wdGlvbnMsXG4gIFN0cmlwZVBheW1lbnRNZXRob2RNZXNzYWdpbmdFbGVtZW50T3B0aW9uc1xufSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7IFN0cmlwZVNlcnZpY2UgfSBmcm9tICcuL3N0cmlwZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZUVsZW1lbnRzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RyaXBlU2VydmljZTogU3RyaXBlU2VydmljZSkge31cblxuICBlbGVtZW50cyhzdHJpcGUsIG9wdGlvbnM/OiBTdHJpcGVFbGVtZW50c09wdGlvbnNDbGllbnRTZWNyZXQpOiBPYnNlcnZhYmxlPFN0cmlwZUVsZW1lbnRzPjtcbiAgZWxlbWVudHMoc3RyaXBlLCBvcHRpb25zPzogU3RyaXBlRWxlbWVudHNPcHRpb25zTW9kZSk6IE9ic2VydmFibGU8U3RyaXBlRWxlbWVudHM+O1xuICBlbGVtZW50cyhzdHJpcGUsIG9wdGlvbnM/OiBTdHJpcGVFbGVtZW50c09wdGlvbnMpOiBPYnNlcnZhYmxlPFN0cmlwZUVsZW1lbnRzPjtcbiAgZWxlbWVudHMoc3RyaXBlLCBvcHRpb25zID0ge30pOiBPYnNlcnZhYmxlPFN0cmlwZUVsZW1lbnRzPiB7XG4gICAgaWYgKHN0cmlwZSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cmlwZS5lbGVtZW50cyhvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpcGUuZWxlbWVudHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaXBlU2VydmljZS5lbGVtZW50cyhvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnN0cmlwZVNlcnZpY2UuZWxlbWVudHMoKTtcbiAgICB9XG4gIH1cblxuICBwYXltZW50UmVxdWVzdChzdHJpcGUsIG9wdGlvbnM6IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFBheW1lbnRSZXF1ZXN0IHtcbiAgICByZXR1cm4gc3RyaXBlID8gc3RyaXBlLnBheW1lbnRSZXF1ZXN0KG9wdGlvbnMpIDogdGhpcy5zdHJpcGVTZXJ2aWNlLnBheW1lbnRSZXF1ZXN0KG9wdGlvbnMpO1xuICB9XG5cbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZUNhcmROdW1iZXJFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZUZweEJhbmtFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZUliYW5FbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUlkZWFsQmFua0VsZW1lbnRPcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKTogU3RyaXBlSWRlYWxCYW5rRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhvcHRpb25zOiBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnMsIGNvbnRhaW5lckNsYXNzOiBzdHJpbmcpOiBTdHJpcGVBdUJhbmtBY2NvdW50RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhvcHRpb25zOiBTdHJpcGVBZmZpcm1NZXNzYWdlRWxlbWVudE9wdGlvbnMsIGNvbnRhaW5lckNsYXNzOiBzdHJpbmcpOiBTdHJpcGVBZmZpcm1NZXNzYWdlRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVBZnRlcnBheUNsZWFycGF5TWVzc2FnZUVsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlQWZ0ZXJwYXlDbGVhcnBheU1lc3NhZ2VFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUVwc0JhbmtFbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZUVwc0JhbmtFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZVAyNEJhbmtFbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZVAyNEJhbmtFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUFkZHJlc3NFbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZUFkZHJlc3NFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUxpbmtBdXRoZW50aWNhdGlvbkVsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlTGlua0F1dGhlbnRpY2F0aW9uRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVJc3N1aW5nQ2FyZE51bWJlckRpc3BsYXlFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUlzc3VpbmdDYXJkTnVtYmVyRGlzcGxheUVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMoXG4gICAgb3B0aW9uczogU3RyaXBlSXNzdWluZ0NhcmRDdmNEaXNwbGF5RWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVJc3N1aW5nQ2FyZEN2Y0Rpc3BsYXlFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZUlzc3VpbmdDYXJkRXhwaXJ5RGlzcGxheUVsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlSXNzdWluZ0NhcmRFeHBpcnlEaXNwbGF5RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVJc3N1aW5nQ2FyZFBpbkRpc3BsYXlFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUlzc3VpbmdDYXJkUGluRGlzcGxheUVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMoXG4gICAgb3B0aW9uczogU3RyaXBlUGF5bWVudE1ldGhvZE1lc3NhZ2luZ0VsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlUGF5bWVudE1ldGhvZE1lc3NhZ2luZ0VsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMoXG4gICAgb3B0aW9uczogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZVBheW1lbnRSZXF1ZXN0QnV0dG9uRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhvcHRpb25zOiBTdHJpcGVQYXltZW50RWxlbWVudE9wdGlvbnMsIGNvbnRhaW5lckNsYXNzOiBzdHJpbmcpOiBTdHJpcGVQYXltZW50RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhvcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKSB7XG4gICAgaWYgKCFjb250YWluZXJDbGFzcyB8fCAob3B0aW9ucyAmJiBvcHRpb25zLmNsYXNzZXMpKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuY2xhc3Nlcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uKG9wdGlvbnMgfHwge30pLFxuICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgYmFzZTogY29udGFpbmVyQ2xhc3MsXG4gICAgICAgICAgY29tcGxldGU6IGAke2NvbnRhaW5lckNsYXNzfS0tY29tcGxldGVgLFxuICAgICAgICAgIGVtcHR5OiBgJHtjb250YWluZXJDbGFzc30tLWVtcHR5YCxcbiAgICAgICAgICBmb2N1czogYCR7Y29udGFpbmVyQ2xhc3N9LS1mb2N1c2AsXG4gICAgICAgICAgaW52YWxpZDogYCR7Y29udGFpbmVyQ2xhc3N9LS1pbnZhbGlkYCxcbiAgICAgICAgICB3ZWJraXRBdXRvRmlsbDogYCR7Y29udGFpbmVyQ2xhc3N9LS13ZWJraXQtYXV0b0ZpbGxgXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnMgfHwge307XG4gIH1cbn1cbiJdfQ==